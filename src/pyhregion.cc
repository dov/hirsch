// Autogenerated file for halcon type HRegion

#include "pyhirsch.h"

static void
PyHirschRegion_dealloc(PyHirschRegion* self)
{
    if(self->Region)
        delete self->Region;
    PyObject_Del(self);
}

static int
PyHirschRegion_init(PyHirschRegion *self, PyObject *args, PyObject */*kwds*/)
{
    PyObject *ob;
    
    if (PyArg_ParseTuple(args,"O",&ob)) {
        if (PyHirschRegion_Check(ob))
            self->Region = new HalconCpp::HRegion(*(((PyHirschRegion*)ob)->Region));
    }
    else
        self->Region = new HalconCpp::HRegion();

    PyErr_Clear();
    return 0;
}

#include "hregion_autogen_methods_declarations.i"

static PyMethodDef PyHirschRegion_methods[] = {
#include "hregion_autogen_methods_list.i"
    {NULL}  /* Sentinel */
};

Py_ssize_t PyHirschRegion_Length(PyObject *o)
{
    HalconCpp::HRegion *Region = (((PyHirschRegion*)o)->Region);
    return Region->CountObj(); // Return the length of the sequence
}

PyObject *
PyHirschRegion_GetItem(PyObject *o, Py_ssize_t i)
{
    HalconCpp::HRegion *Region = (((PyHirschRegion*)o)->Region);

    return PyHirschRegion_FromHRegion(Region[i]);
}

static PySequenceMethods PyHirschRegion_sequence_methods = {
    PyHirschRegion_Length,                /* sq_length */
    0,                                   /* sq_concat */
    0,                                   /* sq_repeat */
    PyHirschRegion_GetItem,               /* sq_item */
};


PyObject* PyHirschRegion_iter(PyObject *self)
{
  Py_INCREF(self);
  ((PyHirschRegion*)self)->iter_pos = 0;
  return self;
}

PyObject* PyHirschRegion_iternext(PyObject *self)
{
    PyHirschRegion *p = (PyHirschRegion *)self;
    HalconCpp::HRegion *Region = (p->Region);

    if (p->iter_pos < Region->CountObj()) {
        int i=p->iter_pos; // shortcut
        p->iter_pos+=1;

        return PyHirschRegion_FromHRegion(Region[i]);
    }
    else {
        /* Raising of standard StopIteration exception with empty value. */
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
}

PyObject *PyHirschRegion_FromHRegion(HalconCpp::HRegion Region)
{
    PyHirschRegion *v = (PyHirschRegion*)PyObject_New(PyHirschRegion, &PyHirschRegionType);
    v->Region = new HalconCpp::HRegion(Region);
    return (PyObject*)v;
}

PyTypeObject PyHirschRegionType = {
    PyObject_HEAD_INIT(NULL)
    0,                         /*ob_size*/
    "hirsch13.HRegion",      /*tp_name*/
    sizeof(PyHirschRegion), /*tp_basicsize*/
    0,                         /*tp_itemsize*/
    (destructor)PyHirschRegion_dealloc,       /*tp_dealloc*/
    0,                         /*tp_print*/
    0,                         /*tp_getattr*/
    0,                         /*tp_setattr*/
    0,                         /*tp_compare*/
    0,                         /*tp_repr*/
    0,                         /*tp_as_number*/
    &PyHirschRegion_sequence_methods,        /*tp_as_sequence*/
    0,                         /*tp_as_mapping*/
    0,                         /*tp_hash */
    0,                         /*tp_call*/
    0,                         /*tp_str*/
    0,                         /*tp_getattro*/
    0,                         /*tp_setattro*/
    0,                         /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_ITER,        /*tp_flags*/
    "PyHirschRegion",        /* tp_doc */
    0,		               /* tp_traverse */
    0,		               /* tp_clear */
    0,		               /* tp_richcompare */
    0,		               /* tp_weaklistoffset */
    &PyHirschRegion_iter,		 /* tp_iter */
    &PyHirschRegion_iternext,         /* tp_iternext */
    PyHirschRegion_methods,  /* tp_methods */
    0,                         /* tp_members */
    0,                         /* tp_getset */
    0,                         /* tp_base */
    0,                         /* tp_dict */
    0,                         /* tp_descr_get */
    0,                         /* tp_descr_set */
    0,                         /* tp_dictoffset */
    (initproc)PyHirschRegion_init,          /* tp_init */
    0,                         /* tp_alloc */
    PyType_GenericNew,         /* tp_new */
};


void PyHirschRegionAddToModule(PyObject *m)
{
    Py_INCREF(&PyHirschRegionType);
    if (PyType_Ready(&PyHirschRegionType) < 0)
        return;
    PyModule_AddObject(m, "HRegion", (PyObject *)&PyHirschRegionType);
}

