// Autogenerated file for halcon type HCircle

#include "pyhirsch.h"

static void
PyHirschCircle_dealloc(PyHirschCircle* self)
{
    self->Circle.~HCircle();
    PyObject_Del(self);
}

static int
PyHirschCircle_init(PyHirschCircle *self, PyObject *args, PyObject */*kwds*/)
{
    double centerX=0,centerY=0,radius=0;

    if (PyArg_ParseTuple(args,"|(dd)d",&centerX,&centerY,&radius))
        self->Circle = Halcon::HCircle(Halcon::HPoint2D(centerX,centerY),
                                       radius);
    return 0;
}

#include "hcircle_autogen_methods_declarations.i"

static PyMethodDef PyHirschCircle_methods[] = {
#include "hcircle_autogen_methods_list.i"
    {NULL}  /* Sentinel */
};

static PyObject *
PyHirschCircle_new(PyTypeObject *type, PyObject */*args*/, PyObject */*kwds*/)
{
    PyHirschCircle *self;

    self = (PyHirschCircle *)type->tp_alloc(type, 0);
    // Explicit call to constructor placement new
    new(&self->Circle) Halcon::HCircle();
    
    return (PyObject *)self;
}

PyObject *PyHirschCircle_FromHCircle(Halcon::HCircle Circle)
{
    PyHirschCircle *self = (PyHirschCircle*)PyHirschCircle_new(&PyHirschCircleType, NULL, NULL);
    self->Circle = Halcon::HCircle(Circle);
    return (PyObject*)self;
}

static PyObject *
PyHirschCircle_str(PyObject *ob)
{
    PyHirschCircle *self = (PyHirschCircle *)ob;
    Halcon::HPoint2D Center = self->Circle.Center();
    double r = self->Circle.Radius();
    PyObject *Tuple = Py_BuildValue("Od",
                                    PyHirschPoint2D_FromHPoint2D(Center),
                                    r);
    PyObject *Ret = PyObject_Str(Tuple);
    Py_DECREF(Tuple);

    return Ret;
}

PyTypeObject PyHirschCircleType = {
    PyVarObject_HEAD_INIT(NULL, 0)
    "Hirsch.HCircle",      /*tp_name*/
    sizeof(PyHirschCircle), /*tp_basicsize*/
    0,                         /*tp_itemsize*/
    (destructor)PyHirschCircle_dealloc,       /*tp_dealloc*/
    0,                         /*tp_print*/
    0,                         /*tp_getattr*/
    0,                         /*tp_setattr*/
    0,                         /*tp_compare*/
    PyHirschCircle_str,                         /*tp_repr*/
    0,                         /*tp_as_number*/
    0,        /*tp_as_sequence*/
    0,                         /*tp_as_mapping*/
    0,                         /*tp_hash */
    0,                         /*tp_call*/
    PyHirschCircle_str,                         /*tp_str*/
    0,                         /*tp_getattro*/
    0,                         /*tp_setattro*/
    0,                         /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT,        /*tp_flags*/
    "PyHirschCircle",        /* tp_doc */
    0,		               /* tp_traverse */
    0,		               /* tp_clear */
    0,		               /* tp_richcompare */
    0,		               /* tp_weaklistoffset */
    0,		 /* tp_iter */
    0,         /* tp_iternext */
    PyHirschCircle_methods,  /* tp_methods */
    0,                         /* tp_members */
    0,                         /* tp_getset */
    0,                         /* tp_base */
    0,                         /* tp_dict */
    0,                         /* tp_descr_get */
    0,                         /* tp_descr_set */
    0,                         /* tp_dictoffset */
    (initproc)PyHirschCircle_init,          /* tp_init */
    0,                         /* tp_alloc */
    PyHirschCircle_new         /* tp_new */
};


void PyHirschCircleAddToModule(PyObject *m)
{
    Py_INCREF(&PyHirschCircleType);
    if (PyType_Ready(&PyHirschCircleType) < 0)
        return;
    PyModule_AddObject(m, "HCircle", (PyObject *)&PyHirschCircleType);
}

