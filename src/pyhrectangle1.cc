// Autogenerated file for halcon type HRectangle1

#include "pyhirsch.h"

static void
PyHirschRectangle1_dealloc(PyHirschRectangle1* self)
{
    self->Rectangle1.~HRectangle1();
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static int
PyHirschRectangle1_init(PyHirschRectangle1 *self, PyObject *args, PyObject */*kwds*/)
{
    double left, top, right, bottom;
    PyHirschRectangle1 *rect;

    try {
        if (PyArg_ParseTuple(args,"(dd)(dd)",&left,&top,&right,&bottom)) 
            self->Rectangle1 = Halcon::HRectangle1(Halcon::HPoint2D(left,top),
                                                   Halcon::HPoint2D(right,bottom));
                                                   
        else if (PyArg_ParseTuple(args,"O",&rect)
                 && PyHirschRectangle1_Check(rect)
                 ) {
            self->Rectangle1 = Halcon::HRectangle1(rect->Rectangle1);
        }
        else
            // empty rectangle
            self->Rectangle1 = Halcon::HRectangle1();
    }
    catch (Halcon::HException &except) {
        PyErr_SetString(PyExc_RuntimeError, except.message);
        return 0;
    }

    PyErr_Clear();

    return 0;
}

#include "hrectangle1_autogen_methods_declarations.i"

static PyMethodDef PyHirschRectangle1_methods[] = {
#include "hrectangle1_autogen_methods_list.i"
    {NULL}  /* Sentinel */
};

Py_ssize_t PyHirschRectangle1_Length(PyObject */*o*/)
{
    return 2;
}

PyObject *
PyHirschRectangle1_GetItem(PyObject *self, Py_ssize_t i)
{
    Halcon::HRectangle1 *Rectangle1 = &(((PyHirschRectangle1*)self)->Rectangle1);

    if (i==0) {
        return PyHirschPoint2D_FromHPoint2D(Rectangle1->UpperLeft());
    }
    else if (i==1) {
        return PyHirschPoint2D_FromHPoint2D(Rectangle1->LowerRight());
    }
    return NULL;
}

static PySequenceMethods PyHirschRectangle1_sequence_methods = {
    PyHirschRectangle1_Length,                /* sq_length */
    0,                                   /* sq_concat */
    0,                                   /* sq_repeat */
    PyHirschRectangle1_GetItem,               /* sq_item */
};


PyObject* PyHirschRectangle1_iter(PyObject *self)
{
  Py_INCREF(self);
  ((PyHirschRectangle1*)self)->iter_pos = 0;
  return self;
}

PyObject* PyHirschRectangle1_iternext(PyObject *self)
{
    PyHirschRectangle1 *p = (PyHirschRectangle1 *)self;
    Halcon::HRectangle1 *Rectangle1 = &(p->Rectangle1);

    if (p->iter_pos < 2) {
        PyObject *ret = NULL;
        int i=p->iter_pos; // shortcut

        // Strangely this crashe unless I create the temporary valiable pt.
        if (i==0) {
            Halcon::HPoint2D pt = Rectangle1->UpperLeft();
            ret = PyHirschPoint2D_FromHPoint2D(pt);
        }
        else if (i==1) {
            Halcon::HPoint2D pt = Rectangle1->LowerRight();
            ret = PyHirschPoint2D_FromHPoint2D(pt);
        }

        p->iter_pos+=1;

        return ret;
    } else {
        /* Raising of standard StopIteration exception with empty value. */
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
}

static PyObject *
PyHirschRectangle1_new(PyTypeObject *type, PyObject */*args*/, PyObject */*kwds*/)
{
    PyHirschRectangle1 *self;

    self = (PyHirschRectangle1 *)type->tp_alloc(type, 0);
    // Explicit call to constructor placement new
    new(&self->Rectangle1) Halcon::HPoint2D();
    
    return (PyObject *)self;
}

PyObject *PyHirschRectangle1_FromHRectangle1(Halcon::HRectangle1 Rectangle1)
{
    PyHirschRectangle1 *self = (PyHirschRectangle1*)PyHirschRectangle1_new(&PyHirschRectangle1Type, NULL, NULL);
    self->Rectangle1 = Rectangle1;
    return (PyObject*)self;
}

static PyObject *
PyHirschRectangle1_str(PyObject *ob)
{
    PyHirschRectangle1 *self = (PyHirschRectangle1 *)ob;
    Halcon::HPoint2D ul = self->Rectangle1.UpperLeft();
    Halcon::HPoint2D lr = self->Rectangle1.LowerRight();
    PyObject *Tuple = Py_BuildValue("(OO)",
                                    PyHirschPoint2D_FromHPoint2D(ul),
                                    PyHirschPoint2D_FromHPoint2D(lr));
    PyObject *Ret = PyObject_Str(Tuple);
    Py_DECREF(Tuple);

    return Ret;
}

#if PY_MAJOR_VERSION >= 3
#define Py_TPFLAGS_HAVE_ITER 0
#endif

PyTypeObject PyHirschRectangle1Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    "Hirsch.Rectangle1",      /*tp_name*/
    sizeof(PyHirschRectangle1), /*tp_basicsize*/
    0,                         /*tp_itemsize*/
    (destructor)PyHirschRectangle1_dealloc,       /*tp_dealloc*/
    0,                         /*tp_print*/
    0,                         /*tp_getattr*/
    0,                         /*tp_setattr*/
    0,                         /*tp_compare*/
    PyHirschRectangle1_str,                         /*tp_repr*/
    0,                         /*tp_as_number*/
    &PyHirschRectangle1_sequence_methods,        /*tp_as_sequence*/
    0,                         /*tp_as_mapping*/
    0,                         /*tp_hash */
    0,                         /*tp_call*/
    PyHirschRectangle1_str,                         /*tp_str*/
    0,                         /*tp_getattro*/
    0,                         /*tp_setattro*/
    0,                         /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_ITER,        /*tp_flags*/
    "PyHirschRectangle1",        /* tp_doc */
    0,		               /* tp_traverse */
    0,		               /* tp_clear */
    0,		               /* tp_richcompare */
    0,		               /* tp_weaklistoffset */
    &PyHirschRectangle1_iter,		 /* tp_iter */
    &PyHirschRectangle1_iternext,         /* tp_iternext */
    PyHirschRectangle1_methods,  /* tp_methods */
    0,                         /* tp_members */
    0,                         /* tp_getset */
    0,                         /* tp_base */
    0,                         /* tp_dict */
    0,                         /* tp_descr_get */
    0,                         /* tp_descr_set */
    0,                         /* tp_dictoffset */
    (initproc)PyHirschRectangle1_init,          /* tp_init */
    0,                         /* tp_alloc */
    PyHirschRectangle1_new,         /* tp_new */
};


void PyHirschRectangle1AddToModule(PyObject *m)
{
    Py_INCREF(&PyHirschRectangle1Type);
    if (PyType_Ready(&PyHirschRectangle1Type) < 0)
        return;
    PyModule_AddObject(m, "HRectangle1", (PyObject *)&PyHirschRectangle1Type);
}

